#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
x-bridge-image: &bridge-image kiranbmore0101/bridge:${TAG:-latest-dev}
x-bridge-user: &bridge-user root
x-bridge-depends-on: &bridge-depends-on
  - db
  - redis
x-bridge-volumes: &bridge-volumes
  # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./docker:/app/docker
  - ./bridge:/app/bridge
  - ./bridge-frontend:/app/bridge-frontend
  - bridge_home:/app/bridge_home
  - ./tests:/app/tests

version: "3.7"
services:
  redis:
    image: redis:latest
    container_name: bridge_cache
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis:/data

  db:
    env_file: docker/.env
    image: postgres:14
    container_name: bridge_db
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - db_home:/var/lib/postgresql/data

  bridge:
    env_file: docker/.env
    image: *bridge-image
    container_name: bridge_app
    command: ["/app/docker/docker-bootstrap.sh", "app"]
    restart: unless-stopped
    ports:
      - 8088:8088
    user: *bridge-user
    depends_on: *bridge-depends-on
    volumes: *bridge-volumes
    environment:
      CYPRESS_CONFIG: "${CYPRESS_CONFIG}"

  bridge-websocket:
    container_name: bridge_websocket
    build: ./bridge-websocket
    image: bridge-websocket
    ports:
      - 8080:8080
    depends_on:
      - redis
    # Mount everything in bridge-websocket into container and
    # then exclude node_modules and dist with bogus volume mount.
    # This is necessary because host and container need to have
    # their own, separate versions of these files. .dockerignore
    # does not seem to work when starting the service through
    # docker-compose.
    #
    # For example, node_modules may contain libs with native bindings.
    # Those bindings need to be compiled for each OS and the container
    # OS is not necessarily the same as host OS.
    volumes:
      - ./bridge-websocket:/home/bridge-websocket
      - /home/bridge-websocket/node_modules
      - /home/bridge-websocket/dist
    environment:
      - PORT=8080
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_SSL=false

  bridge-init:
    image: *bridge-image
    container_name: bridge_init
    command: ["/app/docker/docker-init.sh"]
    env_file: docker/.env
    depends_on: *bridge-depends-on
    user: *bridge-user
    volumes: *bridge-volumes
    environment:
      CYPRESS_CONFIG: "${CYPRESS_CONFIG}"
    healthcheck:
      disable: true

  bridge-node:
    image: node:16
    container_name: bridge_node
    command: ["/app/docker/docker-frontend.sh"]
    env_file: docker/.env
    depends_on: *bridge-depends-on
    volumes: *bridge-volumes

  bridge-worker:
    image: *bridge-image
    container_name: bridge_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: docker/.env
    restart: unless-stopped
    depends_on: *bridge-depends-on
    user: *bridge-user
    volumes: *bridge-volumes
    healthcheck:
      test: ["CMD-SHELL", "celery inspect ping -A bridge.tasks.celery_app:app -d celery@$$HOSTNAME"]
    # Bump memory limit if processing selenium / thumbnails on bridge-worker
    # mem_limit: 2038m
    # mem_reservation: 128M

  bridge-worker-beat:
    image: *bridge-image
    container_name: bridge_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file: docker/.env
    restart: unless-stopped
    depends_on: *bridge-depends-on
    user: *bridge-user
    volumes: *bridge-volumes
    healthcheck:
      disable: true

  bridge-tests-worker:
    image: *bridge-image
    container_name: bridge_tests_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: docker/.env
    environment:
      DATABASE_HOST: localhost
      DATABASE_DB: test
      REDIS_CELERY_DB: 2
      REDIS_RESULTS_DB: 3
      REDIS_HOST: localhost
    network_mode: host
    depends_on: *bridge-depends-on
    user: *bridge-user
    volumes: *bridge-volumes
    healthcheck:
      test: ["CMD-SHELL", "celery inspect ping -A bridge.tasks.celery_app:app -d celery@$$HOSTNAME"]

volumes:
  bridge_home:
    external: false
  db_home:
    external: false
  redis:
    external: false
